// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Demo.CalcEng.Domain.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class FrameworkTestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Framework.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FrameworkTest", "\tFramework tests.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "FrameworkTest")))
            {
                global::Demo.CalcEng.Domain.Tests.Features.FrameworkTestFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Null check in an array - 01 - Provide friendly message when actual DateTime field" +
            " is null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void NullCheckInAnArray_01_ProvideFriendlyMessageWhenActualDateTimeFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null check in an array - 01 - Provide friendly message when actual DateTime field" +
                    " is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"2000-01-01\" }, { \"PropA\"" +
                        ": 2, \"PropB\": null } ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:DateTime"});
                table12.AddRow(new string[] {
                            "1",
                            "2000-01-01"});
                table12.AddRow(new string[] {
                            "2",
                            "2000-01-02"});
#line 7
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table12, "Then ");
#line hidden
#line 11
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <1/2/2000 12:00:00 AM>, Actual is null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Null check in an array - 02 - Provide friendly message when actual Decimal field " +
            "is null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void NullCheckInAnArray_02_ProvideFriendlyMessageWhenActualDecimalFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null check in an array - 02 - Provide friendly message when actual Decimal field " +
                    "is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": 20.01 }, { \"PropA\": 2, \"P" +
                        "ropB\": null } ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Number"});
                table13.AddRow(new string[] {
                            "1",
                            "20.01"});
                table13.AddRow(new string[] {
                            "2",
                            "20.02"});
#line 17
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table13, "Then ");
#line hidden
#line 21
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <20.02>, Actual is null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Null check in an array - 03 - Provide friendly message when actual Boolean field " +
            "is null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void NullCheckInAnArray_03_ProvideFriendlyMessageWhenActualBooleanFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null check in an array - 03 - Provide friendly message when actual Boolean field " +
                    "is null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": true }, { \"PropA\": 2, \"Pr" +
                        "opB\": null } ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Boolean"});
                table14.AddRow(new string[] {
                            "1",
                            "true"});
                table14.AddRow(new string[] {
                            "2",
                            "false"});
#line 27
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table14, "Then ");
#line hidden
#line 31
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <False>, Actual: <null>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Null check in an array - 04 - Provide friendly message when actual Guid field is " +
            "null")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void NullCheckInAnArray_04_ProvideFriendlyMessageWhenActualGuidFieldIsNull()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null check in an array - 04 - Provide friendly message when actual Guid field is " +
                    "null", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "000000000001\" }, { \"PropA\": 2, \"PropB\": null } ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Guid"});
                table15.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-000000000002"});
                table15.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-000000000001"});
#line 37
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table15, "Then ");
#line hidden
#line 41
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <00000000-0000-0000-0000-000000000002>, Actual is null\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 01 - Expected values should pass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_01_ExpectedValuesShouldPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 01 - Expected values should pass", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000b\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Guid"});
                table16.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-00000000000a"});
                table16.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000B"});
#line 48
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 02 - Unexpected values should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_02_UnexpectedValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 02 - Unexpected values should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000b\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Guid"});
                table17.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-000000000001"});
                table17.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000b"});
#line 56
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table17, "Then ");
#line hidden
#line 60
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <00000000-0000-0000-0000-000000000001>, Actual: <00000000" +
                        "-0000-0000-0000-00000000000a>\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 03 - Invalid expected values should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_03_InvalidExpectedValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 03 - Invalid expected values should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000b\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Guid"});
                table18.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-00000000000-"});
                table18.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000b"});
#line 66
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table18, "Then ");
#line hidden
#line 70
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <00000000-0000-0000-0000-00000000000-> is not a valid Gui" +
                        "d\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 04 - Invalid actual values should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_04_InvalidActualValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 04 - Invalid actual values should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 73
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 74
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000-\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA:key",
                            "PropB:Guid"});
                table19.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-00000000000a"});
                table19.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000b"});
#line 76
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table19, "Then ");
#line hidden
#line 80
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Actual <00000000-0000-0000-0000-00000000000-> is not a valid Guid\'" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 05 - Key Guid - Expected values should pass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_05_KeyGuid_ExpectedValuesShouldPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 05 - Key Guid - Expected values should pass", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000b\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA",
                            "PropB:Key:Guid"});
                table20.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-00000000000a"});
                table20.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000B"});
#line 86
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table20, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 06 - Key Guid - Unexpected values should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_06_KeyGuid_UnexpectedValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 06 - Key Guid - Unexpected values should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000b\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA",
                            "PropB:Key:Guid"});
                table21.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-000000000001"});
                table21.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000b"});
#line 94
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table21, "Then ");
#line hidden
#line 98
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Exp" +
                        "ected row not found in actual\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 07 - Key Guid - Invalid expected values should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_07_KeyGuid_InvalidExpectedValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 07 - Key Guid - Invalid expected values should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
 testRunner.When("returned content is the array \'[ { \"PropA\": 1, \"PropB\": \"00000000-0000-0000-0000-" +
                        "00000000000a\" }, { \"PropA\": 2, \"PropB\": \"00000000-0000-0000-0000-00000000000b\" }" +
                        " ]\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropA",
                            "PropB:Key:Guid"});
                table22.AddRow(new string[] {
                            "1",
                            "00000000-0000-0000-0000-00000000000a"});
                table22.AddRow(new string[] {
                            "2",
                            "00000000-0000-0000-0000-00000000000-"});
#line 104
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table22, "Then ");
#line hidden
#line 108
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <00000000-0000-0000-0000-00000000000-> is not a valid Gui" +
                        "d\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 08 - Compose Key Guid - Expected values should pass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_08_ComposeKeyGuid_ExpectedValuesShouldPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 08 - Compose Key Guid - Expected values should pass", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""C"" }, { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""D"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Key:Number",
                            "PropC"});
                table23.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table23.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000A",
                            "2",
                            "B"});
                table23.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "3",
                            "C"});
                table23.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "1",
                            "D"});
#line 114
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table23, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 09 - Compose Key Guid - Unexpected values should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_09_ComposeKeyGuid_UnexpectedValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 09 - Compose Key Guid - Unexpected values should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 121
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 122
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""C"" }, { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""D"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Key:Number",
                            "PropC"});
                table24.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table24.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000A",
                            "2",
                            "B"});
                table24.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000d",
                            "3",
                            "C"});
                table24.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "1",
                            "D"});
#line 124
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table24, "Then ");
#line hidden
#line 130
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 3.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Exp" +
                        "ected row not found in actual\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 10 - Compose Key Guid - Invalid expected values should " +
            "fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_10_ComposeKeyGuid_InvalidExpectedValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 10 - Compose Key Guid - Invalid expected values should " +
                    "fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 134
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""C"" }, { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""D"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Key:Number",
                            "PropC"});
                table25.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table25.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000-",
                            "2",
                            "B"});
                table25.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000d",
                            "3",
                            "C"});
                table25.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "1",
                            "D"});
#line 136
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table25, "Then ");
#line hidden
#line 142
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty: PropB. Expected <00000000-0000-0000-0000-00000000000-> is not a valid Gui" +
                        "d\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Guid fields in an array - 11 - Compose Key Guid - Invalid actual values should fa" +
            "il")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void GuidFieldsInAnArray_11_ComposeKeyGuid_InvalidActualValuesShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Guid fields in an array - 11 - Compose Key Guid - Invalid actual values should fa" +
                    "il", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 145
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 146
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000-"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""C"" }, { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""D"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Key:Number",
                            "PropC"});
                table26.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table26.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "2",
                            "B"});
                table26.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "3",
                            "C"});
                table26.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "1",
                            "D"});
#line 148
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table26, "Then ");
#line hidden
#line 154
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Exp" +
                        "ected row not found in actual\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 01 - Without Key - Should pass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_01_WithoutKey_ShouldPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 01 - Without Key - Should pass", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 158
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 159
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000c"", ""PropC"": ""C"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Guid",
                            "PropA:Number",
                            "PropC"});
                table27.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table27.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "2",
                            "B"});
                table27.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000c",
                            "3",
                            "C"});
#line 161
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 02 - Single Key - Should pass")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_02_SingleKey_ShouldPass()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 02 - Single Key - Should pass", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 167
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 168
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000c"", ""PropC"": ""C"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Number",
                            "PropC"});
                table28.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table28.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "2",
                            "B"});
                table28.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000c",
                            "3",
                            "C"});
#line 170
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table28, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 03 - Single Key - Key found multiple times in actual should " +
            "fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_03_SingleKey_KeyFoundMultipleTimesInActualShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 03 - Single Key - Key found multiple times in actual should " +
                    "fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 177
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000c"", ""PropC"": ""C"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Number",
                            "PropC"});
                table29.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table29.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "2",
                            "B"});
                table29.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000c",
                            "3",
                            "C"});
#line 179
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table29, "Then ");
#line hidden
#line 184
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Exp" +
                        "ected row key found 2 times in actual\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 04 - Compose Key - Key found multiple times in actual should" +
            " fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_04_ComposeKey_KeyFoundMultipleTimesInActualShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 04 - Compose Key - Key found multiple times in actual should" +
                    " fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 187
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 188
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000c"", ""PropC"": ""C"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Key:Number",
                            "PropC"});
                table30.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table30.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "2",
                            "B"});
                table30.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000c",
                            "3",
                            "C"});
#line 190
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table30, "Then ");
#line hidden
#line 195
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 1.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Exp" +
                        "ected row key found 2 times in actual\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 05 - Single Key - Duplicated expected key should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_05_SingleKey_DuplicatedExpectedKeyShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 05 - Single Key - Duplicated expected key should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 199
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000c"", ""PropC"": ""C"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Number",
                            "PropC"});
                table31.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table31.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "2",
                            "B"});
                table31.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000c",
                            "3",
                            "C"});
#line 201
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table31, "Then ");
#line hidden
#line 206
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Dup" +
                        "licated Key PropB: 00000000-0000-0000-0000-00000000000a\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 06 - Compose Key - Duplicated expected key should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_06_ComposeKey_DuplicatedExpectedKeyShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 06 - Compose Key - Duplicated expected key should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 210
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""C"" }, { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""D"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Key:Guid",
                            "PropA:Key:Number",
                            "PropC"});
                table32.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table32.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "B"});
                table32.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000d",
                            "3",
                            "C"});
                table32.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "1",
                            "D"});
#line 212
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table32, "Then ");
#line hidden
#line 218
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Dup" +
                        "licated Key PropB: 00000000-0000-0000-0000-00000000000a, PropA: 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Fields in an array - 07 - Without Key - Property not found should fail")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "FrameworkTest")]
        public void FieldsInAnArray_07_WithoutKey_PropertyNotFoundShouldFail()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Fields in an array - 07 - Without Key - Property not found should fail", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 221
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 222
 testRunner.When(@"returned content is the array '[ { ""PropA"": 1, ""PropB"": ""00000000-0000-0000-0000-00000000000a"", ""PropC"": ""A"" }, { ""PropAA"": 2, ""PropB"": ""00000000-0000-0000-0000-00000000000b"", ""PropC"": ""B"" }, { ""PropA"": 3, ""PropB"": ""00000000-0000-0000-0000-00000000000c"", ""PropC"": ""C"" } ]'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "PropB:Guid",
                            "PropA:Number",
                            "PropC"});
                table33.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000a",
                            "1",
                            "A"});
                table33.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000b",
                            "2",
                            "B"});
                table33.AddRow(new string[] {
                            "00000000-0000-0000-0000-00000000000c",
                            "3",
                            "C"});
#line 224
 testRunner.Then("jpath \'$\' should be the complex-element array (framework-test)", ((string)(null)), table33, "Then ");
#line hidden
#line 229
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Com" +
                        "paring rows at position 2.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
 testRunner.And("should throw exception of type AssertFailedException with message containing \'Pro" +
                        "perty PropA not found\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
