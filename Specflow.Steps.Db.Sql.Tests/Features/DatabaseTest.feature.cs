// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Specflow.Steps.Db.Sql.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DatabaseTestFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "DatabaseTest.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "DatabaseTest", "\tDemonstrates populating and asserting expected data in a SQL Server database", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DatabaseTest")))
            {
                global::Specflow.Steps.Db.Sql.Tests.Features.DatabaseTestFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name",
                        "ContactName",
                        "ContactPhone",
                        "ContactEmail"});
            table1.AddRow(new string[] {
                        "1",
                        "sup-1",
                        "cont-1",
                        "phone-1",
                        "email-1"});
            table1.AddRow(new string[] {
                        "2",
                        "sup-2",
                        "cont-2",
                        "phone-2",
                        "email-2"});
#line 5
testRunner.Given("table with identity columns \'[dbo].[Supplier]\' contains the data", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Name"});
            table2.AddRow(new string[] {
                        "1",
                        "cat-1"});
            table2.AddRow(new string[] {
                        "2",
                        "cat-2"});
#line 9
testRunner.Given("table with identity columns \'[dbo].[Category]\' contains the data", ((string)(null)), table2, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Populate and validate a table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void PopulateAndValidateATable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Populate and validate a table", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Name",
                            "Description",
                            "Cost",
                            "ListPrice",
                            "CategoryId",
                            "SupplierId",
                            "IsActive",
                            "ReleaseDate",
                            "CreatedOn"});
                table3.AddRow(new string[] {
                            "code-1",
                            "product-1",
                            "[NULL]",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-01",
                            "2000-02-01"});
                table3.AddRow(new string[] {
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-02",
                            "2000-02-02"});
                table3.AddRow(new string[] {
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "1",
                            "2000-01-03",
                            "2000-02-03"});
                table3.AddRow(new string[] {
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-04",
                            "2000-02-04"});
                table3.AddRow(new string[] {
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-05",
                            "2000-02-05"});
#line 15
testRunner.Given("table \'[dbo].[Product]\' contains the data", ((string)(null)), table3, "Given ");
#line hidden
#line 22
testRunner.When("I execute my operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id:Key",
                            "Code",
                            "Name",
                            "Description",
                            "Cost:Number",
                            "ListPrice:Number",
                            "CategoryId",
                            "SupplierId",
                            "IsActive:Boolean",
                            "ReleaseDate:DateTime",
                            "CreatedOn:DateTime"});
                table4.AddRow(new string[] {
                            "101",
                            "code-1",
                            "product-1",
                            "[NULL]",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-01",
                            "2000-02-01"});
                table4.AddRow(new string[] {
                            "102",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-02",
                            "2000-02-02"});
                table4.AddRow(new string[] {
                            "103",
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "true",
                            "2000-01-03",
                            "2000-02-03"});
                table4.AddRow(new string[] {
                            "104",
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "false",
                            "2000-01-04",
                            "2000-02-04"});
                table4.AddRow(new string[] {
                            "105",
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "false",
                            "2000-01-05",
                            "2000-02-05"});
#line 23
testRunner.Then("table \'[dbo].[Product]\' should contain the data", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate a table using a query")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void ValidateATableUsingAQuery()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate a table using a query", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Code",
                            "Name",
                            "Description",
                            "Cost",
                            "ListPrice",
                            "CategoryId",
                            "SupplierId",
                            "IsActive",
                            "ReleaseDate",
                            "CreatedOn"});
                table5.AddRow(new string[] {
                            "code-1",
                            "product-1",
                            "[NULL]",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-01",
                            "2000-02-01"});
                table5.AddRow(new string[] {
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-02",
                            "2000-02-02"});
                table5.AddRow(new string[] {
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "1",
                            "2000-01-03",
                            "2000-02-03"});
                table5.AddRow(new string[] {
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-04",
                            "2000-02-04"});
                table5.AddRow(new string[] {
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-05",
                            "2000-02-05"});
#line 32
testRunner.Given("table \'[dbo].[Product]\' contains the data", ((string)(null)), table5, "Given ");
#line hidden
#line 39
testRunner.When("I execute my operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id:Key",
                            "Code",
                            "Name",
                            "Description",
                            "Cost:Number",
                            "ListPrice:Number",
                            "CategoryId",
                            "SupplierId",
                            "IsActive:Boolean",
                            "ReleaseDate:DateTime",
                            "CreatedOn:DateTime"});
                table6.AddRow(new string[] {
                            "101",
                            "code-1",
                            "product-1",
                            "[NULL]",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-01",
                            "2000-02-01"});
                table6.AddRow(new string[] {
                            "102",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-02",
                            "2000-02-02"});
                table6.AddRow(new string[] {
                            "103",
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "true",
                            "2000-01-03",
                            "2000-02-03"});
                table6.AddRow(new string[] {
                            "104",
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "false",
                            "2000-01-04",
                            "2000-02-04"});
                table6.AddRow(new string[] {
                            "105",
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "false",
                            "2000-01-05",
                            "2000-02-05"});
#line 40
testRunner.Then("query \'(SELECT * FROM [dbo].[Product]) AS prod\' should return the data", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Populate and validate a table with identity column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void PopulateAndValidateATableWithIdentityColumn()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Populate and validate a table with identity column", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Code",
                            "Name",
                            "Description",
                            "Cost",
                            "ListPrice",
                            "CategoryId",
                            "SupplierId",
                            "IsActive",
                            "ReleaseDate",
                            "CreatedOn"});
                table7.AddRow(new string[] {
                            "1",
                            "code-1",
                            "product-1",
                            "desc-1",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-01",
                            "2000-02-01"});
                table7.AddRow(new string[] {
                            "2",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-02",
                            "2000-02-02"});
                table7.AddRow(new string[] {
                            "3",
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "1",
                            "2000-01-03",
                            "2000-02-03"});
                table7.AddRow(new string[] {
                            "4",
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-04",
                            "2000-02-04"});
                table7.AddRow(new string[] {
                            "5",
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-05",
                            "2000-02-05"});
#line 49
testRunner.Given("table with identity columns \'[dbo].[Product]\' contains the data", ((string)(null)), table7, "Given ");
#line hidden
#line 56
testRunner.When("I execute my operation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id:Key",
                            "Code",
                            "Name",
                            "Description",
                            "Cost:Number",
                            "ListPrice:Number",
                            "CategoryId",
                            "SupplierId",
                            "IsActive:Boolean",
                            "ReleaseDate:DateTime"});
                table8.AddRow(new string[] {
                            "1",
                            "code-1",
                            "product-1",
                            "desc-1",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-01"});
                table8.AddRow(new string[] {
                            "2",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-02"});
                table8.AddRow(new string[] {
                            "3",
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "true",
                            "2000-01-03"});
                table8.AddRow(new string[] {
                            "4",
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "false",
                            "2000-01-04"});
                table8.AddRow(new string[] {
                            "5",
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "false",
                            "2000-01-05"});
#line 57
testRunner.Then("table \'[dbo].[Product]\' should contain the data", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter and validate a table - one field, one value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void FilterAndValidateATable_OneFieldOneValue()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter and validate a table - one field, one value", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Code",
                            "Name",
                            "Description",
                            "Cost",
                            "ListPrice",
                            "CategoryId",
                            "SupplierId",
                            "IsActive",
                            "ReleaseDate",
                            "CreatedOn"});
                table9.AddRow(new string[] {
                            "1",
                            "code-1",
                            "product-1",
                            "desc-1",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-01",
                            "2000-02-01"});
                table9.AddRow(new string[] {
                            "2",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-02",
                            "2000-02-02"});
                table9.AddRow(new string[] {
                            "3",
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "1",
                            "2000-01-03",
                            "2000-02-03"});
                table9.AddRow(new string[] {
                            "4",
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-04",
                            "2000-02-04"});
                table9.AddRow(new string[] {
                            "5",
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-05",
                            "2000-02-05"});
#line 66
testRunner.Given("table with identity columns \'[dbo].[Product]\' contains the data", ((string)(null)), table9, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValues"});
                table10.AddRow(new string[] {
                            "Id",
                            "2"});
#line 73
testRunner.Given("I filter table \'[dbo].[Product]\' by", ((string)(null)), table10, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id:Key",
                            "Code",
                            "Name",
                            "Description",
                            "Cost:Number",
                            "ListPrice:Number",
                            "CategoryId",
                            "SupplierId",
                            "IsActive:Boolean",
                            "ReleaseDate:DateTime"});
                table11.AddRow(new string[] {
                            "2",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-02"});
#line 76
testRunner.Then("table \'[dbo].[Product]\' should contain the data", ((string)(null)), table11, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter and validate a table - multiple fields and values")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void FilterAndValidateATable_MultipleFieldsAndValues()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter and validate a table - multiple fields and values", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Code",
                            "Name",
                            "Description",
                            "Cost",
                            "ListPrice",
                            "CategoryId",
                            "SupplierId",
                            "IsActive",
                            "ReleaseDate",
                            "CreatedOn"});
                table12.AddRow(new string[] {
                            "1",
                            "code-1",
                            "product-1",
                            "desc-1",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-01",
                            "2000-02-01"});
                table12.AddRow(new string[] {
                            "2",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "1",
                            "2000-01-02",
                            "2000-02-02"});
                table12.AddRow(new string[] {
                            "3",
                            "code-3",
                            "product-3",
                            "desc-3",
                            "103.10",
                            "113.10",
                            "2",
                            "1",
                            "1",
                            "2000-01-03",
                            "2000-02-03"});
                table12.AddRow(new string[] {
                            "4",
                            "code-4",
                            "product-4",
                            "",
                            "104.10",
                            "114.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-04",
                            "2000-02-04"});
                table12.AddRow(new string[] {
                            "5",
                            "code-5",
                            "product-5",
                            "[NULL]",
                            "105.10",
                            "115.10",
                            "2",
                            "1",
                            "0",
                            "2000-01-05",
                            "2000-02-05"});
#line 81
testRunner.Given("table with identity columns \'[dbo].[Product]\' contains the data", ((string)(null)), table12, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValues"});
                table13.AddRow(new string[] {
                            "Id",
                            "1,2,5"});
                table13.AddRow(new string[] {
                            "IsActive",
                            "1"});
#line 88
testRunner.Given("I filter table \'[dbo].[Product]\' by", ((string)(null)), table13, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id:Key",
                            "Code",
                            "Name",
                            "Description",
                            "Cost:Number",
                            "ListPrice:Number",
                            "CategoryId",
                            "SupplierId",
                            "IsActive:Boolean",
                            "ReleaseDate:DateTime"});
                table14.AddRow(new string[] {
                            "1",
                            "code-1",
                            "product-1",
                            "desc-1",
                            "101.10",
                            "111.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-01"});
                table14.AddRow(new string[] {
                            "2",
                            "code-2",
                            "product-2",
                            "desc-2",
                            "102.10",
                            "112.10",
                            "1",
                            "2",
                            "true",
                            "2000-01-02"});
#line 92
testRunner.Then("table \'[dbo].[Product]\' should contain the data", ((string)(null)), table14, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Filter and validate multiple tables")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void FilterAndValidateMultipleTables()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Filter and validate multiple tables", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValues"});
                table15.AddRow(new string[] {
                            "Name",
                            "sup-1"});
#line 98
testRunner.Given("I filter table \'[dbo].[Supplier]\' by", ((string)(null)), table15, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValues"});
                table16.AddRow(new string[] {
                            "Name",
                            "cat-2"});
#line 101
testRunner.Given("I filter table \'[dbo].[Category]\' by", ((string)(null)), table16, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name",
                            "ContactName",
                            "ContactPhone",
                            "ContactEmail"});
                table17.AddRow(new string[] {
                            "1",
                            "sup-1",
                            "cont-1",
                            "phone-1",
                            "email-1"});
#line 104
testRunner.Then("table \'[dbo].[Supplier]\' should contain the data", ((string)(null)), table17, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "Name"});
                table18.AddRow(new string[] {
                            "2",
                            "cat-2"});
#line 107
testRunner.Then("table \'[dbo].[Category]\' should contain the data", ((string)(null)), table18, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate empty table")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void ValidateEmptyTable()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate empty table", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "FieldName",
                            "FieldValues"});
                table19.AddRow(new string[] {
                            "Name",
                            "sup-10"});
#line 112
testRunner.Given("I filter table \'[dbo].[Supplier]\' by", ((string)(null)), table19, "Given ");
#line hidden
#line 115
testRunner.Then("table \'[dbo].[Supplier]\' should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate fields as GUID")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DatabaseTest")]
        public virtual void ValidateFieldsAsGUID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate fields as GUID", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Col1:Key:Guid",
                            "Col2:Guid"});
                table20.AddRow(new string[] {
                            "1aaaaaaa-bbbb-cccc-dddd-2eeeeeeeeeee",
                            "2AAAAAAA-BBBB-CCCC-DDDD-1EEEEEEEEEEE"});
#line 118
testRunner.Then("query \'(SELECT \'1aaaaaaa-bbbb-cccc-dddd-2eeeeeeeeeee\' AS Col1, \'2AAAAAAA-BBBB-CCC" +
                        "C-DDDD-1EEEEEEEEEEE\' AS Col2) AS Guids\' should return the data", ((string)(null)), table20, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
